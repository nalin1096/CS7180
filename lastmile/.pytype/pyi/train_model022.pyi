# (generated with --quick)

import logging
from typing import Any, Optional, TypeVar

AdamOptimizer: module
COVM: Any
ImageDataGenerator: module
MEANM: Any
ModelCheckpoint: module
checkpoint_dir: str
checkpoint_path: str
cifar10: module
cp_callback: Any
fcov: str
fmean: str
logger: logging.Logger
logging: module
np: module
os: module
pickle: module
sct: module
tf: module

AnyStr = TypeVar('AnyStr', str, bytes)
_T2 = TypeVar('_T2')

def bl(image, sample = ...) -> Any: ...
def bl_cd(image, sample = ...) -> Any: ...
def bl_cd_pn(image, sample = ...) -> Any: ...
def bl_cd_pn_ag(image, sample = ...) -> Any: ...
def enable_cloud_log(level = ...) -> None: ...
def fit_model(X_train, Y_train, model: _T2, checkpoint_dir, imgtup) -> _T2: ...
def mean_absolute_error(y_true, y_pred) -> Any: ...
def model02() -> Any: ...
def model_predict(model, X_test, imgtup) -> Any: ...
def plot_images(name, X_test, Y_pred, Y_true) -> None: ...
def plot_loss(fpath, history) -> None: ...
def read_pickle(fpath) -> Any: ...
def review_image_output(X_test, Y_pred, Y_true, imgtup, every = ...) -> None: ...
def run_simulation(fcov, fmean) -> None: ...
def urljoin(base: AnyStr, url: Optional[AnyStr], allow_fragments: bool = ...) -> AnyStr: ...
